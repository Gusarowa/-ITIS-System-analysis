openapi: 3.0.3
info:
  title: Coffee shop for programmers 1.0
  description: |-
    Это описание запросов для проекта 
  version: 1.0.11
servers:
  - url: https://coffeeshop/api/v3
paths:
  /payment/chooseMethod:
    post:
      tags:
        - payment
      summary: Выбор метода оплаты
      description: Позволяет выбрать способ оплаты для текущего заказа.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  format: int64
                  description: ID заказа
                  example: 10
                paymentMethod:
                  type: string
                  description: Способ оплаты (например, карта, PayPal, криптовалюта и т.д.)
                  example: 'credit_card'
              required:
                - orderId
                - paymentMethod
      responses:
        '200':
          description: Успешный выбор метода оплаты
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentMethod:
                    type: string
                    example: 'credit_card'
                  status:
                    type: string
                    example: 'selected'
        '400':
          description: Некорректный выбор метода оплаты
        '422':
          description: Ошибка валидации
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee

  /payment/storeCard:
    post:
      tags:
        - payment
      summary: Сохранение данных карты
      description: Хранение данных карты для будущих платежей. Требуется авторизация пользователя.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
                  description: ID пользователя
                  example: 1001
                cardNumber:
                  type: string
                  description: Номер карты
                  example: '4111111111111111'
                expirationDate:
                  type: string
                  description: Срок действия карты
                  example: '12/25'
                cardHolderName:
                  type: string
                  description: Имя владельца карты
                  example: 'John Doe'
              required:
                - userId
                - cardNumber
                - expirationDate
                - cardHolderName
      responses:
        '200':
          description: Успешное сохранение карты
        '400':
          description: Некорректные данные карты
        '401':
          description: Неавторизованный доступ
        '422':
          description: Ошибка валидации
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee

  /payment/alternativeMethods:
    post:
      tags:
        - payment
      summary: Альтернативные способы оплаты
      description: Позволяет выбрать альтернативный способ оплаты, например, через внешние сервисы, без прямого взаимодействия с эквайрингом.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  format: int64
                  description: ID заказа
                  example: 10
                alternativeMethod:
                  type: string
                  description: Альтернативный способ оплаты (например, PayPal, криптовалюта и т.д.)
                  example: 'paypal'
              required:
                - orderId
                - alternativeMethod
      responses:
        '200':
          description: Успешный выбор альтернативного способа оплаты
          content:
            application/json:
              schema:
                type: object
                properties:
                  alternativeMethod:
                    type: string
                    example: 'paypal'
                  status:
                    type: string
                    example: 'selected'
        '400':
          description: Некорректный выбор способа оплаты
        '422':
          description: Ошибка валидации
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee

  /payment/refund/{orderId}:
    post:
      tags:
        - payment
      summary: Возврат средств
      description: Возможность вернуть средства при отмене или возврате заказа.
      parameters:
        - name: orderId
          in: path
          description: ID отмененного заказа
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Причина возврата
                  example: 'Cancelled by customer'
      responses:
        '200':
          description: Успешный возврат средств
        '400':
          description: Ошибка возврата средств
        '404':
          description: Заказ не найден
        '422':
          description: Ошибка валидации
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
  /menu:
    get:
      tags:
        - menu
      summary: Получить все доступные позиции меню
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItems'          
            application/xml:
              schema:
                $ref: '#/components/schemas/MenuItem'
          headers:
            Cache-Control:                      # Заголовок Cache-Control
              description: Управление кэшированием
              schema:
                type: string
                example: "max-age=3600, must-revalidate"
            ETag:                               # Заголовок ETag
              description: Уникальный идентификатор версии ресурса
              schema:
                type: string
                example: "33a64df551425fcc55e"
        '400':
          description: Invalid ID supplied
        '404':
          description: Positions not found
        '422':
          description: Validation exception
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
  /menu/addItem:
    post:
      tags:
        - menu
      summary: Добавить новый элемент в меню
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
          application/xml:
            schema:
              $ref: '#/components/schemas/MenuItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MenuItem'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItems'          
            application/xml:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
  /menu/findById/{id}:
    get:
      tags:
        - menu
      summary: Получить описание элемента меню по id
      parameters:
        - name: id
          in: path
          description: ID позиции меню
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '400':
          description: Invalid status value
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
            
  /menu/delete/{id}:
    delete:
      tags:
        - menu
      summary: Удалить элемент меню по id
      parameters:
        - name: id
          in: path
          description: ID позиции меню
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '400':
          description: Invalid status value
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
  /order/add:
    post:
      tags:
        - orders
      summary: Добавить заказ
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      parameters:
        - name: tags
          in: query
          description: Tags фильтрации
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid tag value
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
  /order/get/{id}:
    get:
      tags:
        - orders
      summary: Получить заказ по id
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: []
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
    delete:
      tags:
        - orders
      summary: Удалить заказ по id
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id value
      security:
        - coffee_shop_auth:
            - write:coffee
            - read:coffee
  /reviews:
    get:
      tags:
        - reviews
      summary: Получить список всех отзывов о заказах
      description: Отображает все отзывы клиентов о заказах, включая рейтинг и комментарии.
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Отзывы не найдены
      security:
        - coffee_shop_auth:
            - read:coffee
    post:
      tags:
        - reviews
      summary: Оставить отзыв о заказе
      description: Позволяет клиентам оставить отзыв о заказе, включая оценку и комментарий.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Некорректные данные
      security:
        - coffee_shop_auth:
            - write:coffee
  /reviews/{orderId}:
    get:
      tags:
        - reviews
      summary: Получить отзыв по id заказа
      description: Возвращает отзыв по конкретному заказу по его ID.
      parameters:
        - name: orderId
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: успешная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Отзыв не найден
      security:
        - coffee_shop_auth:
            - read:coffee
  /reviews/update/{orderId}:
    put:
      tags:
        - reviews
      summary: Обновить отзыв о заказе
      description: Позволяет обновить ранее оставленный отзыв о заказе.
      parameters:
        - name: orderId
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '200':
          description: успешная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Некорректные данные
        '404':
          description: Отзыв не найден
      security:
        - coffee_shop_auth:
            - write:coffee
  /reviews/delete/{orderId}:
    delete:
      tags:
        - reviews
      summary: Удалить отзыв о заказе
      description: Позволяет удалить ранее оставленный отзыв о заказе.
      parameters:
        - name: orderId
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: успешная операция
        '404':
          description: Отзыв не найден
      security:
        - coffee_shop_auth:
            - write:coffee

  /loyalty:
    get:
      tags:
        - loyalty
      summary: Получение информации о бонусах
      description: Отображение доступного баланса и истории начислений/списаний бонусов.
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/LoyaltyInfo'
        '401':
          description: Неавторизованный доступ
        '404':
          description: История бонусов не найдена
      security:
        - coffee_shop_auth:
            - read:coffee

  /loyalty/earn:
    post:
      tags:
        - loyalty
      summary: Начисление бонусов за покупки
      requestBody:
        description: Данные о покупке для начисления бонусов
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyTransaction'
        required: true
      responses:
        '200':
          description: Успешное начисление бонусов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyInfo'
        '400':
          description: Некорректные данные
        '401':
          description: Неавторизованный доступ

  /loyalty/redeem:
    post:
      tags:
        - loyalty
      summary: Списание бонусов для получения скидки
      requestBody:
        description: Данные для списания бонусов
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyRedeemRequest'
        required: true
      responses:
        '200':
          description: Успешное списание бонусов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyInfo'
        '400':
          description: Недостаточно бонусов или некорректные данные
        '401':
          description: Неавторизованный доступ

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        menuItemId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        date:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Orders:
      type: array
      items: 
        $ref: '#/components/schemas/Order'  
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    MenuItem:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: espresso
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: item status in the store
          enum:
            - available
            - pending
            - sold
    MenuItems:
      type: array
      items: 
        $ref: '#/components/schemas/MenuItem'  
    LoyaltyInfo:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1001
        availablePoints:
          type: integer
          format: int32
          example: 1500
        history:
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyTransaction'
    LoyaltyTransaction:
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
          example: 987654
        date:
          type: string
          format: date-time
          example: '2025-01-28T10:30:00Z'
        points:
          type: integer
          format: int32
          example: 200
        type:
          type: string
          description: Тип операции (начисление или списание)
          enum:
            - earn
            - redeem
    LoyaltyRedeemRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1001
        pointsToRedeem:
          type: integer
          format: int32
          example: 500
    Review:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          example: 12345
        rating:
          type: integer
          description: Оценка заказа (от 1 до 5)
          example: 4
        comments:
          type: string
          description: Текст отзыва клиента
          example: "Очень вкусный кофе, но обслуживание немного задержало."
        date:
          type: string
          format: date-time
          description: Дата оставления отзыва
          example: "2025-01-28T10:30:00Z"
      xml:
        name: review
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    coffee_shop_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://coffeeshop.swagger.io/oauth/authorize
          scopes:
            write:coffee: modify
            read:coffee: read
    api_key:
      type: apiKey
      name: api_key
      in: header